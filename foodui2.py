# -*- coding: utf-8 -*-
"""FOODUI2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QZEzEPF-V6f_ooyxAS4tyMbHSU4SaZJW
"""

import streamlit as st
import requests

st.set_page_config("🍽️ Food Risk Detector", layout="wide")
st.title("🍽️ Open Food Facts UI")

# --- Sidebar ---
st.sidebar.header("Configure Query")
barcode = st.sidebar.text_input("Product Barcode", "")
fields = st.sidebar.multiselect(
    "Fields to retrieve",
    ["product_name", "nutrition_grades", "nutriments", "nutriscore_data", "misc_tags"],
    default=["product_name", "nutrition_grades"]
)
operation = st.sidebar.radio("Operation", ["Fetch Product", "Search by Category", "Submit Missing Data"])

# Additional inputs
if operation == "Search by Category":
    category = st.sidebar.text_input("Category (e.g. Orange Juice)", "")
    grade = st.sidebar.selectbox("Nutrition Grade", ["a", "b", "c", "d", "e"])
elif operation == "Submit Missing Data":
    uid = st.sidebar.text_input("User ID", "")
    pwd = st.sidebar.text_input("Password", type="password")

# --- Action ---
if st.sidebar.button("Go"):
    with st.spinner('Loading, please wait... 🌀'):
        if operation == "Fetch Product":
            if not barcode.strip():
                st.error("Please enter a barcode.")
            else:
                url = f"https://world.openfoodfacts.org/api/v2/product/{barcode.strip()}"
                params = {"fields": ",".join(fields)}
                res = requests.get(url, params=params)
                if res.ok and res.json().get("status") == 1:
                    st.success("✅ Product found!")
                    data = res.json()["product"]

                    st.subheader(f"📦 Product: {data.get('product_name', 'Unknown')}")
                    info = {}

                    for key in fields:
                        value = data.get(key)
                        if isinstance(value, (dict, list)):
                            with st.expander(f"🔍 {key.replace('_', ' ').title()} (Click to Expand)"):
                                st.json(value)
                        else:
                            info[key.replace("_", " ").title()] = value

                    if info:
                        st.markdown("---")
                        st.markdown("### 📋 Product Info")
                        for k, v in info.items():
                            st.write(f"**{k}:** {v if v is not None else 'N/A'}")
                else:
                    st.error("❌ Product not found or error.")

        elif operation == "Search by Category":
            if not category.strip():
                st.error("Please enter a category.")
            else:
                url = "https://world.openfoodfacts.org/api/v2/search"
                params = {
                    "categories_tags_en": category.strip(),
                    "nutrition_grades_tags": grade,
                    "fields": "code,product_name,brands,quantity,nutrition_grades,categories,ecoscore_grade,image_small_url"
                }
                res = requests.get(url, params=params)
                if res.ok:
                    obj = res.json()
                    products = obj.get("products", [])
                    st.success(f"✅ Found {obj['count']} products")

                    if not products:
                        st.warning("No products found for this category.")
                    else:
                        # --- Pagination setup ---
                        page_size = 20
                        page_number = st.number_input("Page Number", min_value=1, max_value=max(1, (len(products) - 1) // page_size + 1), step=1)
                        start_idx = (page_number - 1) * page_size
                        end_idx = start_idx + page_size

                        for p in products[start_idx:end_idx]:
                            product_name = p.get("product_name", "Unknown")
                            code = p.get("code", "Unknown")
                            brand = p.get("brands", "Unknown")
                            quantity = p.get("quantity", "Unknown")
                            grade = p.get("nutrition_grades", "Unknown")
                            categories = p.get("categories", "Unknown")
                            ecoscore = p.get("ecoscore_grade", "Unknown")
                            image_url = p.get("image_small_url", "")

                            with st.container():
                                cols = st.columns([1, 3])
                                with cols[0]:
                                    if image_url:
                                        st.image(image_url, width=100)
                                    else:
                                        st.image("https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg", width=100)
                                with cols[1]:
                                    st.markdown(f"### 🥫 {product_name}")

                                    # Clickable brand
                                    if brand and brand != "Unknown":
                                        brand_link = f"https://world.openfoodfacts.org/brand/{brand.replace(' ', '-')}"
                                        st.markdown(f"**Brand:** [{brand}]({brand_link})", unsafe_allow_html=True)
                                    else:
                                        st.write(f"**Brand:** {brand}")

                                    st.write(f"**Quantity:** {quantity}")
                                    st.write(f"**Barcode:** {code}")

                                    # Nutrition Grade badge with emoji
                                    if grade and grade != "Unknown":
                                        color = {
                                            'a': '🟢 A 🥦', 'b': '🟡 B 🍊', 'c': '🟠 C 🍞', 'd': '🟠 D 🍟', 'e': '🔴 E 🍩'
                                        }.get(grade.lower(), grade.upper())
                                        st.write(f"**Nutrition Grade:** {color}")

                                    # Eco-Score badge with emoji
                                    if ecoscore and ecoscore != "Unknown":
                                        eco_color = {
                                            'a': '🟢 A 🌿', 'b': '🟡 B 🍂', 'c': '🟠 C 🍁', 'd': '🟠 D 🪵', 'e': '🔴 E 🔥'
                                        }.get(ecoscore.lower(), ecoscore.upper())
                                        st.write(f"**Eco-Score:** {eco_color}")

                                    # Categories as nice tags
                                    if categories and categories != "Unknown":
                                        st.write("**Categories:**")
                                        for cat in categories.split(','):
                                            st.markdown(f"`{cat.strip()}` ", unsafe_allow_html=True)

                                st.markdown("---")

                else:
                    st.error("❌ Search failed.")

        elif operation == "Submit Missing Data":
            if not (barcode.strip() and uid and pwd):
                st.error("Provide barcode, user ID, and password.")
            else:
                url = "https://world.openfoodfacts.org/cgi/product_jqm2.pl"
                payload = {
                    "user_id": uid,
                    "password": pwd,
                    "code": barcode.strip(),
                    # Example: posting sodium
                    "nutriment_sodium": 0.015,
                    "nutriment_sodium_unit": "g"
                }
                res = requests.post(url, data=payload)
                if res.ok:
                    st.success("✅ Data submitted!")
                    st.json(res.json())
                else:
                    st.error("❌ Submission failed.")